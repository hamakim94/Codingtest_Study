import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		// N개의 정수
		int N = Integer.parseInt(br.readLine());
		// N개의 정수를 담은 배열
		int[] nums = new int[N];
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		for (int i = 0; i < nums.length; i++) {
			nums[i] = Integer.parseInt(st.nextToken());
		}
		// 오름차순으로 정렬
		Arrays.sort(nums);
		// M개의 정수
		int M = Integer.parseInt(br.readLine());
		StringTokenizer st1 = new StringTokenizer(br.readLine(), " ");
		for (int i = 0; i < M; i++) {
			if (binary_search(nums, Integer.parseInt(st1.nextToken()))) {
				bw.write(1 + "\n");
			} else {
				bw.write(0 + "\n");
			}
		}
		bw.close();
	}

	public static boolean binary_search(int[] arr, int target) {
		// 시작점과 끝점 초기화
		int start = 0;
		int end = arr.length - 1;
		// 교차가 되는 순간 멈춘다
		while (start <= end) {
			int mid = (start + end) / 2;
			// 찾았을 때
			if (arr[mid] == target) {
				return true;
			}
			// 가운데 수가 찾고자하는 숫자보다 클 때
			else if (arr[mid] > target) {
				end = mid - 1;
			}
			// 가운데 수가 찾고자하는 숫자보다 작을 때
			else {
				start = mid + 1;
			}
		}
		return false;
	}
}